#!/bin/bash

#
# The configure script is used to query aws for nodes with two specific tags:
#   "cms_id" is expected to be the resource id. It can be any arbitrary value that is
#          unique to the cluster that will be installed by the ssh provisioner.
#   "role" can be either "Master" or "Node". The master node will be configured
#          by kubeadm with etcd, and the kubernetes master processes. A node is
#          a worker node that will be used to run user workloads.
#

NODE='{
        "apiVersion": "cluster.k8s.io/v1alpha1",
        "kind": "Machine",
        "metadata": {
          "generateName": null
        },
        "spec": {
          "providerConfig": {
            "value": {
              "apiVersion": "sshproviderconfig/v1alpha1",
              "kind": "SSHMachineProviderConfig",
              "roles": null,
              "sshConfig": {
                "username": "ubuntu",
                "host": null,
                "port": 22,
                "secretName": "cluster-private-key"
              }
            }
          },
          "versions": {
            "kubelet": "1.10.6",
            "controlPlane": "1.10.6"
          }
        }
      }'

usage()
{
    echo """
    Usage: $0

    You must set the environment variables:

    AWS_ACCESS_KEY_ID     – AWS access key.
    AWS_SECRET_ACCESS_KEY – AWS secret key.
    AWS_DEFAULT_REGION    – AWS region.
    CMS_ID                – CMS Resource ID
    SSH_USER              – ssh username

    """
}

check_or_die()
{
  if [[ -z "$(command -v yq.v2)" ]]; then
      echo >&2 "Please install yq.v2, (IE run 'go get gopkg.in/mikefarah/yq.v2')."
      return 55
  fi

  if [[ -z "$(command -v jq)" ]]; then
      echo >&2 "Please install jq, (IE run 'go get github.com/savaki/jq')."
      return 60
  fi

  for check_item in AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY \
                    AWS_DEFAULT_REGION CMS_ID SSH_USER; do
    if [[ -z "${!check_item}" ]]; then
        echo >&2 "Error: $check_item is not set"
        usage
        return 70
    fi
  done
}

generate_name()
{
  # This is required on OSX. Otherwise the tr command will complain:
  # > tr: Illegal byte sequence
  export LC_CTYPE=C
  STR=""

  for n in 9 5;do
    STR+="$(< /dev/urandom tr -dc 'a-z0-9' | head -c$n)-"
  done
  echo -n "$1-$STR" | sed 's/-$//'
}

# fetch instance data from aws
get_aws_instance_data()
{
  aws ec2 describe-instances \
    --filters "Name=tag:cms_id,Values=${CMS_ID}" "Name=tag:role,Values=[master,worker]" \
    --query "Reservations[].Instances[] | [*].{ipaddress: PublicIpAddress,role: Tags[?Key == 'role'].Value | [0]}"
}

get_node()
{
  local node_type="$1"

  [[ -z "$node_type" ]] && \
    {
      echo >&2 "Usage: get_node <worker|master>"
      return 50
    }

  jq --arg type "$node_type" -Mrc '.[] | select(.role == $type).ipaddress' <<< "$AWS_INSTANCES"
}

num_instances()
{
  jq '. | length' <<< "$AWS_INSTANCES"
}

# check requirements
check_or_die;r=$?
[[ $r -gt 0 ]] && exit $r

# let's just call AWS one time and do the rest in memory shall we?
AWS_INSTANCES=$(get_aws_instance_data)

# check to see that we have valid json
if ! jq -c "." <<< "$AWS_INSTANCES" > /dev/null 2>&1; then
  echo >&2 "Failure acquiring AWS IP address(s)"
  jq . <<< "$AWS_INSTANCES"
  exit 12
fi

# build machine-setup data
# shellcheck disable=SC2089
MACHINES='{"items":[]}'

for node_tuple in worker:node master:ssh-controlplane; do
  IFS=':' read -r node_type NODE_NAME <<< "$node_tuple"

  for node in $(get_node "$node_type"); do
    NAME="$(generate_name "$NODE_NAME")"
    NODE_ITEM=$(jq --arg name "$NAME"     '.metadata.generatedName=$name' <<< "$NODE"           |
                jq --arg node "$node"     '.spec.providerConfig.value.sshConfig.host=$node'     |
                jq --arg user "$SSH_USER" '.spec.providerConfig.value.sshConfig.username=$user' |
                jq -c '[.spec.providerConfig.value.roles=["Master","Etcd"]]')

    MACHINES=$( jq --argjson item "$NODE_ITEM" '.items+=$item' <<< "$MACHINES")
  done
done

# output the machine-setup ConfigMap
for item in $(jq -c ".items[]" <<< "$MACHINES"); do
    echo '---'
    yq.v2 r - <<< "$item"
done

